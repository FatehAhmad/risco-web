/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { DEFAULT_BACKGROUNDFN, EmojiService } from './emoji.service';
/**
 * @record
 */
export function Emoji() { }
if (false) {
    /**
     * Renders the native unicode emoji
     * @type {?}
     */
    Emoji.prototype.isNative;
    /** @type {?} */
    Emoji.prototype.forceSize;
    /** @type {?} */
    Emoji.prototype.tooltip;
    /** @type {?} */
    Emoji.prototype.skin;
    /** @type {?} */
    Emoji.prototype.sheetSize;
    /** @type {?} */
    Emoji.prototype.set;
    /** @type {?} */
    Emoji.prototype.size;
    /** @type {?} */
    Emoji.prototype.emoji;
    /** @type {?} */
    Emoji.prototype.backgroundImageFn;
    /** @type {?|undefined} */
    Emoji.prototype.fallback;
    /** @type {?} */
    Emoji.prototype.emojiOver;
    /** @type {?} */
    Emoji.prototype.emojiLeave;
    /** @type {?} */
    Emoji.prototype.emojiClick;
}
/**
 * @record
 */
export function EmojiEvent() { }
if (false) {
    /** @type {?} */
    EmojiEvent.prototype.emoji;
    /** @type {?} */
    EmojiEvent.prototype.$event;
}
var EmojiComponent = /** @class */ (function () {
    function EmojiComponent(emojiService) {
        this.emojiService = emojiService;
        this.skin = 1;
        this.set = 'apple';
        this.sheetSize = 64;
        /**
         * Renders the native unicode emoji
         */
        this.isNative = false;
        this.forceSize = false;
        this.tooltip = false;
        this.size = 24;
        this.emoji = '';
        this.hideObsolete = false;
        this.SHEET_COLUMNS = 52;
        this.emojiOver = new EventEmitter();
        this.emojiLeave = new EventEmitter();
        this.emojiClick = new EventEmitter();
        this.title = '';
        this.custom = false;
        this.isVisible = true;
        // TODO: replace 4.0.3 w/ dynamic get verison from emoji-datasource in package.json
        this.backgroundImageFn = DEFAULT_BACKGROUNDFN;
    }
    /**
     * @return {?}
     */
    EmojiComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (!this.emoji) {
            return (this.isVisible = false);
        }
        /** @type {?} */
        var data = this.getData();
        if (!data) {
            return (this.isVisible = false);
        }
        // const children = this.children;
        this.unified = data.native || null;
        if (data.custom) {
            this.custom = data.custom;
        }
        if (!data.unified && !data.custom) {
            return (this.isVisible = false);
        }
        if (this.tooltip) {
            this.title = data.shortNames[0];
        }
        if (data.obsoletedBy && this.hideObsolete) {
            return (this.isVisible = false);
        }
        if (this.isNative && data.unified && data.native) {
            // hide older emoji before the split into gendered emoji
            this.style = { fontSize: this.size + "px" };
            if (this.forceSize) {
                this.style.display = 'inline-block';
                this.style.width = this.size + "px";
                this.style.height = this.size + "px";
            }
        }
        else if (data.custom) {
            this.style = {
                width: this.size + "px",
                height: this.size + "px",
                display: 'inline-block',
            };
            if (data.spriteUrl && this.sheetRows && this.sheetColumns) {
                this.style = tslib_1.__assign({}, this.style, { backgroundImage: "url(" + data.spriteUrl + ")", backgroundSize: 100 * this.sheetColumns + "% " + 100 *
                        this.sheetRows + "%", backgroundPosition: this.emojiService.getSpritePosition(data.sheet, this.sheetColumns) });
            }
            else {
                this.style = tslib_1.__assign({}, this.style, { backgroundImage: "url(" + data.imageUrl + ")", backgroundSize: 'contain' });
            }
        }
        else {
            if (data.hidden.length && data.hidden.includes(this.set)) {
                if (this.fallback) {
                    this.style = { fontSize: this.size + "px" };
                    this.unified = this.fallback(data, this);
                }
                else {
                    return (this.isVisible = false);
                }
            }
            else {
                this.style = this.emojiService.emojiSpriteStyles(data.sheet, this.set, this.size, this.sheetSize, this.backgroundImageFn, this.SHEET_COLUMNS);
            }
        }
        return (this.isVisible = true);
    };
    /**
     * @return {?}
     */
    EmojiComponent.prototype.getData = /**
     * @return {?}
     */
    function () {
        return this.emojiService.getData(this.emoji, this.skin, this.set);
    };
    /**
     * @return {?}
     */
    EmojiComponent.prototype.getSanitizedData = /**
     * @return {?}
     */
    function () {
        return (/** @type {?} */ (this.emojiService.getSanitizedData(this.emoji, this.skin, this.set)));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EmojiComponent.prototype.handleClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var emoji = this.getSanitizedData();
        this.emojiClick.emit({ emoji: emoji, $event: $event });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EmojiComponent.prototype.handleOver = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var emoji = this.getSanitizedData();
        this.emojiOver.emit({ emoji: emoji, $event: $event });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EmojiComponent.prototype.handleLeave = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var emoji = this.getSanitizedData();
        this.emojiLeave.emit({ emoji: emoji, $event: $event });
    };
    EmojiComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-emoji',
                    template: "\n  <span *ngIf=\"isVisible\"\n    (click)=\"handleClick($event)\"\n    (mouseenter)=\"handleOver($event)\"\n    (mouseleave)=\"handleLeave($event)\"\n    [title]=\"title\"\n    class=\"emoji-mart-emoji\"\n    [class.emoji-mart-emoji-native]=\"isNative\"\n    [class.emoji-mart-emoji-custom]=\"custom\">\n    <span [ngStyle]=\"style\">\n      <ng-template [ngIf]=\"isNative\">{{ unified }}</ng-template>\n      <ng-content></ng-content>\n    </span>\n  </span>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false
                }] }
    ];
    /** @nocollapse */
    EmojiComponent.ctorParameters = function () { return [
        { type: EmojiService }
    ]; };
    EmojiComponent.propDecorators = {
        skin: [{ type: Input }],
        set: [{ type: Input }],
        sheetSize: [{ type: Input }],
        isNative: [{ type: Input }],
        forceSize: [{ type: Input }],
        tooltip: [{ type: Input }],
        size: [{ type: Input }],
        emoji: [{ type: Input }],
        fallback: [{ type: Input }],
        hideObsolete: [{ type: Input }],
        SHEET_COLUMNS: [{ type: Input }],
        sheetRows: [{ type: Input }],
        sheetColumns: [{ type: Input }],
        emojiOver: [{ type: Output }],
        emojiLeave: [{ type: Output }],
        emojiClick: [{ type: Output }],
        backgroundImageFn: [{ type: Input }]
    };
    return EmojiComponent;
}());
export { EmojiComponent };
if (false) {
    /** @type {?} */
    EmojiComponent.prototype.skin;
    /** @type {?} */
    EmojiComponent.prototype.set;
    /** @type {?} */
    EmojiComponent.prototype.sheetSize;
    /**
     * Renders the native unicode emoji
     * @type {?}
     */
    EmojiComponent.prototype.isNative;
    /** @type {?} */
    EmojiComponent.prototype.forceSize;
    /** @type {?} */
    EmojiComponent.prototype.tooltip;
    /** @type {?} */
    EmojiComponent.prototype.size;
    /** @type {?} */
    EmojiComponent.prototype.emoji;
    /** @type {?} */
    EmojiComponent.prototype.fallback;
    /** @type {?} */
    EmojiComponent.prototype.hideObsolete;
    /** @type {?} */
    EmojiComponent.prototype.SHEET_COLUMNS;
    /** @type {?} */
    EmojiComponent.prototype.sheetRows;
    /** @type {?} */
    EmojiComponent.prototype.sheetColumns;
    /** @type {?} */
    EmojiComponent.prototype.emojiOver;
    /** @type {?} */
    EmojiComponent.prototype.emojiLeave;
    /** @type {?} */
    EmojiComponent.prototype.emojiClick;
    /** @type {?} */
    EmojiComponent.prototype.style;
    /** @type {?} */
    EmojiComponent.prototype.title;
    /** @type {?} */
    EmojiComponent.prototype.unified;
    /** @type {?} */
    EmojiComponent.prototype.custom;
    /** @type {?} */
    EmojiComponent.prototype.isVisible;
    /** @type {?} */
    EmojiComponent.prototype.backgroundImageFn;
    /**
     * @type {?}
     * @private
     */
    EmojiComponent.prototype.emojiService;
}
//# sourceMappingURL=data:application/json;base64,