/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { emojis } from './data/emojis';
import * as i0 from "@angular/core";
/** @type {?} */
var COLONS_REGEX = /^(?:\:([^\:]+)\:)(?:\:skin-tone-(\d)\:)?$/;
/** @type {?} */
var SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];
/** @type {?} */
export var DEFAULT_BACKGROUNDFN = function (set, sheetSize) { return "https://unpkg.com/emoji-datasource-" + set + "@4.0.4/img/" + set + "/sheets-256/" + sheetSize + ".png"; };
var EmojiService = /** @class */ (function () {
    function EmojiService() {
        this.uncompressed = false;
        this.names = {};
        this.emojis = [];
        if (!this.uncompressed) {
            this.uncompress(emojis);
            this.uncompressed = true;
        }
    }
    /**
     * @param {?} list
     * @return {?}
     */
    EmojiService.prototype.uncompress = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        var _this = this;
        this.emojis = list.map(function (emoji) {
            var e_1, _a;
            /** @type {?} */
            var data = tslib_1.__assign({}, emoji);
            if (!data.shortNames) {
                data.shortNames = [];
            }
            data.shortNames.unshift(data.shortName);
            data.id = data.shortName;
            data.native = _this.unifiedToNative(data.unified);
            if (!data.skinVariations) {
                data.skinVariations = [];
            }
            if (!data.keywords) {
                data.keywords = [];
            }
            if (!data.emoticons) {
                data.emoticons = [];
            }
            if (!data.hidden) {
                data.hidden = [];
            }
            if (!data.text) {
                data.text = '';
            }
            if (data.obsoletes) {
                // get keywords from emoji that it obsoletes since that is shared
                /** @type {?} */
                var f = list.find(function (x) { return x.unified === data.obsoletes; });
                if (f) {
                    if (f.keywords) {
                        data.keywords = tslib_1.__spread(data.keywords, f.keywords, [f.shortName]);
                    }
                    else {
                        data.keywords = tslib_1.__spread(data.keywords, [f.shortName]);
                    }
                }
            }
            _this.names[data.unified] = data;
            try {
                for (var _b = tslib_1.__values(data.shortNames), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var n = _c.value;
                    _this.names[n] = data;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return data;
        });
    };
    /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    EmojiService.prototype.getData = /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    function (emoji, skin, set) {
        /** @type {?} */
        var emojiData;
        if (typeof emoji === 'string') {
            /** @type {?} */
            var matches = emoji.match(COLONS_REGEX);
            if (matches) {
                emoji = matches[1];
                if (matches[2]) {
                    skin = (/** @type {?} */ (parseInt(matches[2], 10)));
                }
            }
            if (this.names.hasOwnProperty(emoji)) {
                emojiData = this.names[emoji];
            }
            else {
                return null;
            }
        }
        else if (emoji.id) {
            emojiData = this.names[emoji.id];
        }
        else if (emoji.unified) {
            emojiData = this.names[emoji.unified.toUpperCase()];
        }
        if (!emojiData) {
            emojiData = emoji;
            emojiData.custom = true;
        }
        /** @type {?} */
        var hasSkinVariations = emojiData.skinVariations && emojiData.skinVariations.length;
        if (hasSkinVariations && skin && skin > 1 && set) {
            emojiData = tslib_1.__assign({}, emojiData);
            /** @type {?} */
            var skinKey_1 = SKINS[skin - 1];
            /** @type {?} */
            var variationData = emojiData.skinVariations.find(function (n) {
                return n.unified.includes(skinKey_1);
            });
            if (!variationData.hidden || !variationData.hidden.includes(set)) {
                emojiData.skinTone = skin;
                emojiData = tslib_1.__assign({}, emojiData, variationData);
            }
            emojiData.native = this.unifiedToNative(emojiData.unified);
        }
        emojiData.set = set || '';
        return (/** @type {?} */ (emojiData));
    };
    /**
     * @param {?} unified
     * @return {?}
     */
    EmojiService.prototype.unifiedToNative = /**
     * @param {?} unified
     * @return {?}
     */
    function (unified) {
        /** @type {?} */
        var codePoints = unified.split('-').map(function (u) { return parseInt("0x" + u, 16); });
        return String.fromCodePoint.apply(String, tslib_1.__spread(codePoints));
    };
    /**
     * @param {?} sheet
     * @param {?=} set
     * @param {?=} size
     * @param {?=} sheetSize
     * @param {?=} backgroundImageFn
     * @param {?=} sheetColumns
     * @return {?}
     */
    EmojiService.prototype.emojiSpriteStyles = /**
     * @param {?} sheet
     * @param {?=} set
     * @param {?=} size
     * @param {?=} sheetSize
     * @param {?=} backgroundImageFn
     * @param {?=} sheetColumns
     * @return {?}
     */
    function (sheet, set, size, sheetSize, backgroundImageFn, sheetColumns) {
        if (set === void 0) { set = 'apple'; }
        if (size === void 0) { size = 24; }
        if (sheetSize === void 0) { sheetSize = 64; }
        if (backgroundImageFn === void 0) { backgroundImageFn = DEFAULT_BACKGROUNDFN; }
        if (sheetColumns === void 0) { sheetColumns = 52; }
        return {
            width: size + "px",
            height: size + "px",
            display: 'inline-block',
            'background-image': "url(" + backgroundImageFn(set, sheetSize) + ")",
            'background-size': 100 * sheetColumns + "%",
            'background-position': this.getSpritePosition(sheet, sheetColumns),
        };
    };
    /**
     * @param {?} sheet
     * @param {?} sheetColumns
     * @return {?}
     */
    EmojiService.prototype.getSpritePosition = /**
     * @param {?} sheet
     * @param {?} sheetColumns
     * @return {?}
     */
    function (sheet, sheetColumns) {
        var _a = tslib_1.__read(sheet, 2), sheet_x = _a[0], sheet_y = _a[1];
        /** @type {?} */
        var multiply = 100 / (sheetColumns - 1);
        return multiply * sheet_x + "% " + multiply * sheet_y + "%";
    };
    /**
     * @param {?} emoji
     * @return {?}
     */
    EmojiService.prototype.sanitize = /**
     * @param {?} emoji
     * @return {?}
     */
    function (emoji) {
        if (emoji === null) {
            return null;
        }
        /** @type {?} */
        var id = emoji.id || emoji.shortNames[0];
        /** @type {?} */
        var colons = ":" + id + ":";
        if (emoji.skinTone) {
            colons += ":skin-tone-" + emoji.skinTone + ":";
        }
        emoji.colons = colons;
        return tslib_1.__assign({}, emoji);
    };
    /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    EmojiService.prototype.getSanitizedData = /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    function (emoji, skin, set) {
        return this.sanitize(this.getData(emoji, skin, set));
    };
    EmojiService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    EmojiService.ctorParameters = function () { return []; };
    /** @nocollapse */ EmojiService.ngInjectableDef = i0.defineInjectable({ factory: function EmojiService_Factory() { return new EmojiService(); }, token: EmojiService, providedIn: "root" });
    return EmojiService;
}());
export { EmojiService };
if (false) {
    /** @type {?} */
    EmojiService.prototype.uncompressed;
    /** @type {?} */
    EmojiService.prototype.names;
    /** @type {?} */
    EmojiService.prototype.emojis;
}
//# sourceMappingURL=data:application/json;base64,