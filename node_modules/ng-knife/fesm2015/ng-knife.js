import { Directive, HostListener, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NoSpacesDirective {
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        return !(e.keyCode === 32);
    }
}
NoSpacesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[knifeNoSpaces]'
            },] },
];
NoSpacesDirective.propDecorators = {
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NoCopyPasteDirective {
    /**
     * @param {?} e
     * @return {?}
     */
    noCopy(e) {
        return false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    noPaste(e) {
        return false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    noCut(e) {
        return false;
    }
}
NoCopyPasteDirective.decorators = [
    { type: Directive, args: [{
                selector: '[knifeNoCopyPaste]'
            },] },
];
NoCopyPasteDirective.propDecorators = {
    noCopy: [{ type: HostListener, args: ['copy', ['$event'],] }],
    noPaste: [{ type: HostListener, args: ['paste', ['$event'],] }],
    noCut: [{ type: HostListener, args: ['cut', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AlphanumericDirective {
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        return (e.keyCode === 8 || e.keyCode === 32 || e.keyCode === 37 || e.keyCode === 39)
            ? true : (new RegExp('^[a-zA-Z0-9_]*$')).test(e.key);
    }
}
AlphanumericDirective.decorators = [
    { type: Directive, args: [{
                selector: '[knifeAlphanumeric]'
            },] },
];
AlphanumericDirective.propDecorators = {
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class OnlyNumbersDirective {
    constructor() {
        this.onlyNumbersRegExp = new RegExp('^\\d+$');
    }
    /**
     * @param {?} e
     * @return {?}
     */
    pasteClipboard(e) {
        const /** @type {?} */ data = e.clipboardData.getData('text');
        return this.onlyNumbersRegExp.test(data) ? true : false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        return (e.ctrlKey || e.metaKey || e.keyCode === 8 || e.keyCode === 9 || e.keyCode === 37 || e.keyCode === 39 ||
            e.keyCode === 46 || e.keyCode === 91 || e.keyCode === 93) ? true : this.onlyNumbersRegExp.test(e.key);
    }
}
OnlyNumbersDirective.decorators = [
    { type: Directive, args: [{
                selector: '[knifeOnlyNumbers]'
            },] },
];
OnlyNumbersDirective.propDecorators = {
    pasteClipboard: [{ type: HostListener, args: ['paste', ['$event'],] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgKnifeModule {
}
NgKnifeModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [
                    NoSpacesDirective,
                    NoCopyPasteDirective,
                    AlphanumericDirective,
                    OnlyNumbersDirective
                ],
                exports: [
                    NoSpacesDirective,
                    NoCopyPasteDirective,
                    AlphanumericDirective,
                    OnlyNumbersDirective
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgKnifeModule, AlphanumericDirective as ɵc, NoCopyPasteDirective as ɵb, NoSpacesDirective as ɵa, OnlyNumbersDirective as ɵd };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta25pZmUuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLWtuaWZlL2xpYi9kaXJlY3RpdmVzL25vLXNwYWNlcy5kaXJlY3RpdmUudHMiLCJuZzovL25nLWtuaWZlL2xpYi9kaXJlY3RpdmVzL25vLWNvcHktcGFzdGUuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1rbmlmZS9saWIvZGlyZWN0aXZlcy9hbHBoYW51bWVyaWMuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1rbmlmZS9saWIvZGlyZWN0aXZlcy9vbmx5LW51bWJlcnMuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1rbmlmZS9saWIvbmcta25pZmUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1trbmlmZU5vU3BhY2VzXSdcbn0pXG5leHBvcnQgY2xhc3MgTm9TcGFjZXNEaXJlY3RpdmUge1xuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSkgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIShlLmtleUNvZGUgPT09IDMyKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2tuaWZlTm9Db3B5UGFzdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBOb0NvcHlQYXN0ZURpcmVjdGl2ZSB7XG5cbiAgQEhvc3RMaXN0ZW5lcignY29weScsIFsnJGV2ZW50J10pIG5vQ29weShlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIEBIb3N0TGlzdGVuZXIoJ3Bhc3RlJywgWyckZXZlbnQnXSkgbm9QYXN0ZShlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIEBIb3N0TGlzdGVuZXIoJ2N1dCcsIFsnJGV2ZW50J10pIG5vQ3V0KGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1trbmlmZUFscGhhbnVtZXJpY10nXG59KVxuZXhwb3J0IGNsYXNzIEFscGhhbnVtZXJpY0RpcmVjdGl2ZSB7XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChlLmtleUNvZGUgPT09IDggfHwgZS5rZXlDb2RlID09PSAzMiB8fCBlLmtleUNvZGUgPT09IDM3IHx8IGUua2V5Q29kZSA9PT0gMzkpXG4gICAgPyB0cnVlIDogKG5ldyBSZWdFeHAoJ15bYS16QS1aMC05X10qJCcpKS50ZXN0KGUua2V5KTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdba25pZmVPbmx5TnVtYmVyc10nXG59KVxuZXhwb3J0IGNsYXNzIE9ubHlOdW1iZXJzRGlyZWN0aXZlIHtcblxuICBvbmx5TnVtYmVyc1JlZ0V4cDogUmVnRXhwID0gbmV3IFJlZ0V4cCgnXlxcXFxkKyQnKTtcblxuICBASG9zdExpc3RlbmVyKCdwYXN0ZScsIFsnJGV2ZW50J10pIHBhc3RlQ2xpcGJvYXJkKGU6IENsaXBib2FyZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgY29uc3QgZGF0YSA9IGUuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCd0ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMub25seU51bWJlcnNSZWdFeHAudGVzdChkYXRhKSA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKSBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLmtleUNvZGUgPT09IDggfHwgZS5rZXlDb2RlID09PSA5IHx8IGUua2V5Q29kZSA9PT0gMzcgfHwgZS5rZXlDb2RlID09PSAzOSB8fFxuICAgICAgIGUua2V5Q29kZSA9PT0gNDYgfHwgZS5rZXlDb2RlID09PSA5MSB8fCBlLmtleUNvZGUgPT09IDkzKSA/IHRydWUgOiB0aGlzLm9ubHlOdW1iZXJzUmVnRXhwLnRlc3QoZS5rZXkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9TcGFjZXNEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvbm8tc3BhY2VzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOb0NvcHlQYXN0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9uby1jb3B5LXBhc3RlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbHBoYW51bWVyaWNEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvYWxwaGFudW1lcmljLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBPbmx5TnVtYmVyc0RpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9vbmx5LW51bWJlcnMuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOb1NwYWNlc0RpcmVjdGl2ZSxcbiAgICBOb0NvcHlQYXN0ZURpcmVjdGl2ZSxcbiAgICBBbHBoYW51bWVyaWNEaXJlY3RpdmUsXG4gICAgT25seU51bWJlcnNEaXJlY3RpdmVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE5vU3BhY2VzRGlyZWN0aXZlLFxuICAgIE5vQ29weVBhc3RlRGlyZWN0aXZlLFxuICAgIEFscGhhbnVtZXJpY0RpcmVjdGl2ZSxcbiAgICBPbmx5TnVtYmVyc0RpcmVjdGl2ZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE5nS25pZmVNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7O0lBTXVDLFNBQVMsQ0FBQyxDQUFnQjtRQUM3RCxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLENBQUMsQ0FBQztLQUM1Qjs7O1lBTkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7YUFDNUI7Ozt3QkFFRSxZQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0FDTnJDOzs7OztJQU9vQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxPQUFPLEtBQUssQ0FBQztLQUNkOzs7OztJQUNrQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxPQUFPLEtBQUssQ0FBQztLQUNkOzs7OztJQUNnQyxLQUFLLENBQUMsQ0FBQztRQUN0QyxPQUFPLEtBQUssQ0FBQztLQUNkOzs7WUFiRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjthQUMvQjs7O3FCQUdFLFlBQVksU0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUM7c0JBRy9CLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7b0JBR2hDLFlBQVksU0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7QUNiakM7Ozs7O0lBT3VDLFNBQVMsQ0FBQyxDQUFnQjtRQUM3RCxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFO2NBQ2pGLElBQUksR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN0RDs7O1lBUkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7YUFDaEM7Ozt3QkFHRSxZQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0FDUHJDOztpQ0FPOEIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDOzs7Ozs7SUFFYixjQUFjLENBQUMsQ0FBaUI7UUFDakUsdUJBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO0tBQ3pEOzs7OztJQUVvQyxTQUFTLENBQUMsQ0FBZ0I7UUFDN0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUU7WUFDekcsQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzFHOzs7WUFmRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjthQUMvQjs7OzZCQUtFLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7d0JBS2hDLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7QUNkckM7OztZQU1DLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsRUFDUjtnQkFDRCxZQUFZLEVBQUU7b0JBQ1osaUJBQWlCO29CQUNqQixvQkFBb0I7b0JBQ3BCLHFCQUFxQjtvQkFDckIsb0JBQW9CO2lCQUNyQjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsaUJBQWlCO29CQUNqQixvQkFBb0I7b0JBQ3BCLHFCQUFxQjtvQkFDckIsb0JBQW9CO2lCQUNyQjthQUNGOzs7Ozs7Ozs7Ozs7Ozs7In0=