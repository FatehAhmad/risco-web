import { Directive, HostListener, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NoSpacesDirective = /** @class */ (function () {
    function NoSpacesDirective() {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    NoSpacesDirective.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return !(e.keyCode === 32);
    };
    NoSpacesDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[knifeNoSpaces]'
                },] },
    ];
    NoSpacesDirective.propDecorators = {
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return NoSpacesDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NoCopyPasteDirective = /** @class */ (function () {
    function NoCopyPasteDirective() {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    NoCopyPasteDirective.prototype.noCopy = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NoCopyPasteDirective.prototype.noPaste = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NoCopyPasteDirective.prototype.noCut = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return false;
    };
    NoCopyPasteDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[knifeNoCopyPaste]'
                },] },
    ];
    NoCopyPasteDirective.propDecorators = {
        noCopy: [{ type: HostListener, args: ['copy', ['$event'],] }],
        noPaste: [{ type: HostListener, args: ['paste', ['$event'],] }],
        noCut: [{ type: HostListener, args: ['cut', ['$event'],] }]
    };
    return NoCopyPasteDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AlphanumericDirective = /** @class */ (function () {
    function AlphanumericDirective() {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    AlphanumericDirective.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return (e.keyCode === 8 || e.keyCode === 32 || e.keyCode === 37 || e.keyCode === 39)
            ? true : (new RegExp('^[a-zA-Z0-9_]*$')).test(e.key);
    };
    AlphanumericDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[knifeAlphanumeric]'
                },] },
    ];
    AlphanumericDirective.propDecorators = {
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return AlphanumericDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var OnlyNumbersDirective = /** @class */ (function () {
    function OnlyNumbersDirective() {
        this.onlyNumbersRegExp = new RegExp('^\\d+$');
    }
    /**
     * @param {?} e
     * @return {?}
     */
    OnlyNumbersDirective.prototype.pasteClipboard = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var /** @type {?} */ data = e.clipboardData.getData('text');
        return this.onlyNumbersRegExp.test(data) ? true : false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OnlyNumbersDirective.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return (e.ctrlKey || e.metaKey || e.keyCode === 8 || e.keyCode === 9 || e.keyCode === 37 || e.keyCode === 39 ||
            e.keyCode === 46 || e.keyCode === 91 || e.keyCode === 93) ? true : this.onlyNumbersRegExp.test(e.key);
    };
    OnlyNumbersDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[knifeOnlyNumbers]'
                },] },
    ];
    OnlyNumbersDirective.propDecorators = {
        pasteClipboard: [{ type: HostListener, args: ['paste', ['$event'],] }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return OnlyNumbersDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgKnifeModule = /** @class */ (function () {
    function NgKnifeModule() {
    }
    NgKnifeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        NoSpacesDirective,
                        NoCopyPasteDirective,
                        AlphanumericDirective,
                        OnlyNumbersDirective
                    ],
                    exports: [
                        NoSpacesDirective,
                        NoCopyPasteDirective,
                        AlphanumericDirective,
                        OnlyNumbersDirective
                    ]
                },] },
    ];
    return NgKnifeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgKnifeModule, AlphanumericDirective as ɵc, NoCopyPasteDirective as ɵb, NoSpacesDirective as ɵa, OnlyNumbersDirective as ɵd };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta25pZmUuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLWtuaWZlL2xpYi9kaXJlY3RpdmVzL25vLXNwYWNlcy5kaXJlY3RpdmUudHMiLCJuZzovL25nLWtuaWZlL2xpYi9kaXJlY3RpdmVzL25vLWNvcHktcGFzdGUuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1rbmlmZS9saWIvZGlyZWN0aXZlcy9hbHBoYW51bWVyaWMuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1rbmlmZS9saWIvZGlyZWN0aXZlcy9vbmx5LW51bWJlcnMuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1rbmlmZS9saWIvbmcta25pZmUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1trbmlmZU5vU3BhY2VzXSdcbn0pXG5leHBvcnQgY2xhc3MgTm9TcGFjZXNEaXJlY3RpdmUge1xuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSkgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIShlLmtleUNvZGUgPT09IDMyKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2tuaWZlTm9Db3B5UGFzdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBOb0NvcHlQYXN0ZURpcmVjdGl2ZSB7XG5cbiAgQEhvc3RMaXN0ZW5lcignY29weScsIFsnJGV2ZW50J10pIG5vQ29weShlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIEBIb3N0TGlzdGVuZXIoJ3Bhc3RlJywgWyckZXZlbnQnXSkgbm9QYXN0ZShlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIEBIb3N0TGlzdGVuZXIoJ2N1dCcsIFsnJGV2ZW50J10pIG5vQ3V0KGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1trbmlmZUFscGhhbnVtZXJpY10nXG59KVxuZXhwb3J0IGNsYXNzIEFscGhhbnVtZXJpY0RpcmVjdGl2ZSB7XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChlLmtleUNvZGUgPT09IDggfHwgZS5rZXlDb2RlID09PSAzMiB8fCBlLmtleUNvZGUgPT09IDM3IHx8IGUua2V5Q29kZSA9PT0gMzkpXG4gICAgPyB0cnVlIDogKG5ldyBSZWdFeHAoJ15bYS16QS1aMC05X10qJCcpKS50ZXN0KGUua2V5KTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdba25pZmVPbmx5TnVtYmVyc10nXG59KVxuZXhwb3J0IGNsYXNzIE9ubHlOdW1iZXJzRGlyZWN0aXZlIHtcblxuICBvbmx5TnVtYmVyc1JlZ0V4cDogUmVnRXhwID0gbmV3IFJlZ0V4cCgnXlxcXFxkKyQnKTtcblxuICBASG9zdExpc3RlbmVyKCdwYXN0ZScsIFsnJGV2ZW50J10pIHBhc3RlQ2xpcGJvYXJkKGU6IENsaXBib2FyZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgY29uc3QgZGF0YSA9IGUuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCd0ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMub25seU51bWJlcnNSZWdFeHAudGVzdChkYXRhKSA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKSBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLmtleUNvZGUgPT09IDggfHwgZS5rZXlDb2RlID09PSA5IHx8IGUua2V5Q29kZSA9PT0gMzcgfHwgZS5rZXlDb2RlID09PSAzOSB8fFxuICAgICAgIGUua2V5Q29kZSA9PT0gNDYgfHwgZS5rZXlDb2RlID09PSA5MSB8fCBlLmtleUNvZGUgPT09IDkzKSA/IHRydWUgOiB0aGlzLm9ubHlOdW1iZXJzUmVnRXhwLnRlc3QoZS5rZXkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9TcGFjZXNEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvbm8tc3BhY2VzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOb0NvcHlQYXN0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9uby1jb3B5LXBhc3RlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbHBoYW51bWVyaWNEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvYWxwaGFudW1lcmljLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBPbmx5TnVtYmVyc0RpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9vbmx5LW51bWJlcnMuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOb1NwYWNlc0RpcmVjdGl2ZSxcbiAgICBOb0NvcHlQYXN0ZURpcmVjdGl2ZSxcbiAgICBBbHBoYW51bWVyaWNEaXJlY3RpdmUsXG4gICAgT25seU51bWJlcnNEaXJlY3RpdmVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE5vU3BhY2VzRGlyZWN0aXZlLFxuICAgIE5vQ29weVBhc3RlRGlyZWN0aXZlLFxuICAgIEFscGhhbnVtZXJpY0RpcmVjdGl2ZSxcbiAgICBPbmx5TnVtYmVyc0RpcmVjdGl2ZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE5nS25pZmVNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7SUFNdUMscUNBQVM7Ozs7SUFBOUMsVUFBK0MsQ0FBZ0I7UUFDN0QsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDNUI7O2dCQU5GLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2lCQUM1Qjs7OzRCQUVFLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7OzRCQU5yQzs7Ozs7OztBQ0FBOzs7Ozs7O0lBT29DLHFDQUFNOzs7O0lBQXhDLFVBQXlDLENBQUM7UUFDeEMsT0FBTyxLQUFLLENBQUM7S0FDZDs7Ozs7SUFDa0Msc0NBQU87Ozs7SUFBMUMsVUFBMkMsQ0FBQztRQUMxQyxPQUFPLEtBQUssQ0FBQztLQUNkOzs7OztJQUNnQyxvQ0FBSzs7OztJQUF0QyxVQUF1QyxDQUFDO1FBQ3RDLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7O2dCQWJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2lCQUMvQjs7O3lCQUdFLFlBQVksU0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUM7MEJBRy9CLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7d0JBR2hDLFlBQVksU0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUM7OytCQWJqQzs7Ozs7OztBQ0FBOzs7Ozs7O0lBT3VDLHlDQUFTOzs7O0lBQTlDLFVBQStDLENBQWdCO1FBQzdELE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUU7Y0FDakYsSUFBSSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3REOztnQkFSRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7Ozs0QkFHRSxZQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDOztnQ0FQckM7Ozs7Ozs7QUNBQTs7aUNBTzhCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQzs7Ozs7O0lBRWIsNkNBQWM7Ozs7SUFBakQsVUFBa0QsQ0FBaUI7UUFDakUscUJBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO0tBQ3pEOzs7OztJQUVvQyx3Q0FBUzs7OztJQUE5QyxVQUErQyxDQUFnQjtRQUM3RCxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssRUFBRTtZQUN6RyxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDMUc7O2dCQWZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2lCQUMvQjs7O2lDQUtFLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7NEJBS2hDLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7OytCQWRyQzs7Ozs7OztBQ0FBOzs7O2dCQU1DLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsRUFDUjtvQkFDRCxZQUFZLEVBQUU7d0JBQ1osaUJBQWlCO3dCQUNqQixvQkFBb0I7d0JBQ3BCLHFCQUFxQjt3QkFDckIsb0JBQW9CO3FCQUNyQjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsaUJBQWlCO3dCQUNqQixvQkFBb0I7d0JBQ3BCLHFCQUFxQjt3QkFDckIsb0JBQW9CO3FCQUNyQjtpQkFDRjs7d0JBckJEOzs7Ozs7Ozs7Ozs7Ozs7In0=