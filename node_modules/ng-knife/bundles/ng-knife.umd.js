(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ng-knife', ['exports', '@angular/core'], factory) :
    (factory((global['ng-knife'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NoSpacesDirective = (function () {
        function NoSpacesDirective() {
        }
        /**
         * @param {?} e
         * @return {?}
         */
        NoSpacesDirective.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return !(e.keyCode === 32);
            };
        NoSpacesDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[knifeNoSpaces]'
                    },] },
        ];
        NoSpacesDirective.propDecorators = {
            onKeyDown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return NoSpacesDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NoCopyPasteDirective = (function () {
        function NoCopyPasteDirective() {
        }
        /**
         * @param {?} e
         * @return {?}
         */
        NoCopyPasteDirective.prototype.noCopy = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return false;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NoCopyPasteDirective.prototype.noPaste = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return false;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NoCopyPasteDirective.prototype.noCut = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return false;
            };
        NoCopyPasteDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[knifeNoCopyPaste]'
                    },] },
        ];
        NoCopyPasteDirective.propDecorators = {
            noCopy: [{ type: core.HostListener, args: ['copy', ['$event'],] }],
            noPaste: [{ type: core.HostListener, args: ['paste', ['$event'],] }],
            noCut: [{ type: core.HostListener, args: ['cut', ['$event'],] }]
        };
        return NoCopyPasteDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AlphanumericDirective = (function () {
        function AlphanumericDirective() {
        }
        /**
         * @param {?} e
         * @return {?}
         */
        AlphanumericDirective.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return (e.keyCode === 8 || e.keyCode === 32 || e.keyCode === 37 || e.keyCode === 39)
                    ? true : (new RegExp('^[a-zA-Z0-9_]*$')).test(e.key);
            };
        AlphanumericDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[knifeAlphanumeric]'
                    },] },
        ];
        AlphanumericDirective.propDecorators = {
            onKeyDown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return AlphanumericDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var OnlyNumbersDirective = (function () {
        function OnlyNumbersDirective() {
            this.onlyNumbersRegExp = new RegExp('^\\d+$');
        }
        /**
         * @param {?} e
         * @return {?}
         */
        OnlyNumbersDirective.prototype.pasteClipboard = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var /** @type {?} */ data = e.clipboardData.getData('text');
                return this.onlyNumbersRegExp.test(data) ? true : false;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        OnlyNumbersDirective.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return (e.ctrlKey || e.metaKey || e.keyCode === 8 || e.keyCode === 9 || e.keyCode === 37 || e.keyCode === 39 ||
                    e.keyCode === 46 || e.keyCode === 91 || e.keyCode === 93) ? true : this.onlyNumbersRegExp.test(e.key);
            };
        OnlyNumbersDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[knifeOnlyNumbers]'
                    },] },
        ];
        OnlyNumbersDirective.propDecorators = {
            pasteClipboard: [{ type: core.HostListener, args: ['paste', ['$event'],] }],
            onKeyDown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return OnlyNumbersDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgKnifeModule = (function () {
        function NgKnifeModule() {
        }
        NgKnifeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [
                            NoSpacesDirective,
                            NoCopyPasteDirective,
                            AlphanumericDirective,
                            OnlyNumbersDirective
                        ],
                        exports: [
                            NoSpacesDirective,
                            NoCopyPasteDirective,
                            AlphanumericDirective,
                            OnlyNumbersDirective
                        ]
                    },] },
        ];
        return NgKnifeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgKnifeModule = NgKnifeModule;
    exports.ɵc = AlphanumericDirective;
    exports.ɵb = NoCopyPasteDirective;
    exports.ɵa = NoSpacesDirective;
    exports.ɵd = OnlyNumbersDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta25pZmUudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZy1rbmlmZS9saWIvZGlyZWN0aXZlcy9uby1zcGFjZXMuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1rbmlmZS9saWIvZGlyZWN0aXZlcy9uby1jb3B5LXBhc3RlLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmcta25pZmUvbGliL2RpcmVjdGl2ZXMvYWxwaGFudW1lcmljLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmcta25pZmUvbGliL2RpcmVjdGl2ZXMvb25seS1udW1iZXJzLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmcta25pZmUvbGliL25nLWtuaWZlLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdba25pZmVOb1NwYWNlc10nXG59KVxuZXhwb3J0IGNsYXNzIE5vU3BhY2VzRGlyZWN0aXZlIHtcbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEoZS5rZXlDb2RlID09PSAzMik7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1trbmlmZU5vQ29weVBhc3RlXSdcbn0pXG5leHBvcnQgY2xhc3MgTm9Db3B5UGFzdGVEaXJlY3RpdmUge1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2NvcHknLCBbJyRldmVudCddKSBub0NvcHkoZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBASG9zdExpc3RlbmVyKCdwYXN0ZScsIFsnJGV2ZW50J10pIG5vUGFzdGUoZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBASG9zdExpc3RlbmVyKCdjdXQnLCBbJyRldmVudCddKSBub0N1dChlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdba25pZmVBbHBoYW51bWVyaWNdJ1xufSlcbmV4cG9ydCBjbGFzcyBBbHBoYW51bWVyaWNEaXJlY3RpdmUge1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKSBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoZS5rZXlDb2RlID09PSA4IHx8IGUua2V5Q29kZSA9PT0gMzIgfHwgZS5rZXlDb2RlID09PSAzNyB8fCBlLmtleUNvZGUgPT09IDM5KVxuICAgID8gdHJ1ZSA6IChuZXcgUmVnRXhwKCdeW2EtekEtWjAtOV9dKiQnKSkudGVzdChlLmtleSk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2tuaWZlT25seU51bWJlcnNdJ1xufSlcbmV4cG9ydCBjbGFzcyBPbmx5TnVtYmVyc0RpcmVjdGl2ZSB7XG5cbiAgb25seU51bWJlcnNSZWdFeHA6IFJlZ0V4cCA9IG5ldyBSZWdFeHAoJ15cXFxcZCskJyk7XG5cbiAgQEhvc3RMaXN0ZW5lcigncGFzdGUnLCBbJyRldmVudCddKSBwYXN0ZUNsaXBib2FyZChlOiBDbGlwYm9hcmRFdmVudCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGRhdGEgPSBlLmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dCcpO1xuICAgIHJldHVybiB0aGlzLm9ubHlOdW1iZXJzUmVnRXhwLnRlc3QoZGF0YSkgPyB0cnVlIDogZmFsc2U7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSkgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgZS5rZXlDb2RlID09PSA4IHx8IGUua2V5Q29kZSA9PT0gOSB8fCBlLmtleUNvZGUgPT09IDM3IHx8IGUua2V5Q29kZSA9PT0gMzkgfHxcbiAgICAgICBlLmtleUNvZGUgPT09IDQ2IHx8IGUua2V5Q29kZSA9PT0gOTEgfHwgZS5rZXlDb2RlID09PSA5MykgPyB0cnVlIDogdGhpcy5vbmx5TnVtYmVyc1JlZ0V4cC50ZXN0KGUua2V5KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vU3BhY2VzRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL25vLXNwYWNlcy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTm9Db3B5UGFzdGVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvbm8tY29weS1wYXN0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQWxwaGFudW1lcmljRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2FscGhhbnVtZXJpYy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgT25seU51bWJlcnNEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvb25seS1udW1iZXJzLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTm9TcGFjZXNEaXJlY3RpdmUsXG4gICAgTm9Db3B5UGFzdGVEaXJlY3RpdmUsXG4gICAgQWxwaGFudW1lcmljRGlyZWN0aXZlLFxuICAgIE9ubHlOdW1iZXJzRGlyZWN0aXZlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBOb1NwYWNlc0RpcmVjdGl2ZSxcbiAgICBOb0NvcHlQYXN0ZURpcmVjdGl2ZSxcbiAgICBBbHBoYW51bWVyaWNEaXJlY3RpdmUsXG4gICAgT25seU51bWJlcnNEaXJlY3RpdmVcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0tuaWZlTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIkRpcmVjdGl2ZSIsIkhvc3RMaXN0ZW5lciIsIk5nTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7UUFNdUMscUNBQVM7Ozs7WUFBOUMsVUFBK0MsQ0FBZ0I7Z0JBQzdELE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQzVCOztvQkFORkEsY0FBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxpQkFBaUI7cUJBQzVCOzs7Z0NBRUVDLGlCQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDOztnQ0FOckM7Ozs7Ozs7QUNBQTs7Ozs7OztRQU9vQyxxQ0FBTTs7OztZQUF4QyxVQUF5QyxDQUFDO2dCQUN4QyxPQUFPLEtBQUssQ0FBQzthQUNkOzs7OztRQUNrQyxzQ0FBTzs7OztZQUExQyxVQUEyQyxDQUFDO2dCQUMxQyxPQUFPLEtBQUssQ0FBQzthQUNkOzs7OztRQUNnQyxvQ0FBSzs7OztZQUF0QyxVQUF1QyxDQUFDO2dCQUN0QyxPQUFPLEtBQUssQ0FBQzthQUNkOztvQkFiRkQsY0FBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxvQkFBb0I7cUJBQy9COzs7NkJBR0VDLGlCQUFZLFNBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDOzhCQUcvQkEsaUJBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7NEJBR2hDQSxpQkFBWSxTQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQzs7bUNBYmpDOzs7Ozs7O0FDQUE7Ozs7Ozs7UUFPdUMseUNBQVM7Ozs7WUFBOUMsVUFBK0MsQ0FBZ0I7Z0JBQzdELE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUU7c0JBQ2pGLElBQUksR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN0RDs7b0JBUkZELGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUscUJBQXFCO3FCQUNoQzs7O2dDQUdFQyxpQkFBWSxTQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7b0NBUHJDOzs7Ozs7O0FDQUE7O3FDQU84QixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUM7Ozs7OztRQUViLDZDQUFjOzs7O1lBQWpELFVBQWtELENBQWlCO2dCQUNqRSxxQkFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzdDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO2FBQ3pEOzs7OztRQUVvQyx3Q0FBUzs7OztZQUE5QyxVQUErQyxDQUFnQjtnQkFDN0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUU7b0JBQ3pHLENBQUMsQ0FBQyxPQUFPLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssRUFBRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMxRzs7b0JBZkZELGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUsb0JBQW9CO3FCQUMvQjs7O3FDQUtFQyxpQkFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztnQ0FLaENBLGlCQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDOzttQ0FkckM7Ozs7Ozs7QUNBQTs7OztvQkFNQ0MsYUFBUSxTQUFDO3dCQUNSLE9BQU8sRUFBRSxFQUNSO3dCQUNELFlBQVksRUFBRTs0QkFDWixpQkFBaUI7NEJBQ2pCLG9CQUFvQjs0QkFDcEIscUJBQXFCOzRCQUNyQixvQkFBb0I7eUJBQ3JCO3dCQUNELE9BQU8sRUFBRTs0QkFDUCxpQkFBaUI7NEJBQ2pCLG9CQUFvQjs0QkFDcEIscUJBQXFCOzRCQUNyQixvQkFBb0I7eUJBQ3JCO3FCQUNGOzs0QkFyQkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==