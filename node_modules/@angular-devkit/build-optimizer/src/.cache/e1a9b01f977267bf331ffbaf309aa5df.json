{"remainingRequest":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\ng-emoji-picker\\src\\emoji-input\\emoji-input.component.js","dependencies":[{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\ng-emoji-picker\\src\\emoji-input\\emoji-input.component.js","mtime":499162500000},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582123237433},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527226929000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar emoji_service_1 = require(\"../emoji.service\");\nvar EmojiInputComponent = /*@__PURE__*/ (function () {\n    function EmojiInputComponent(emojiService) {\n        this.emojiService = emojiService;\n        this.popupAnchor = 'top';\n        this.inputClass = '';\n        this.searchClass = '';\n        this.onEnter = function () { };\n        this.autofocus = false;\n        this.closeAfterSelection = true;\n        this.modelChange = new core_1.EventEmitter();\n        this.setPopupAction = new core_1.EventEmitter();\n        this.blur = new core_1.EventEmitter();\n        this.focus = new core_1.EventEmitter();\n        this.keyup = new core_1.EventEmitter();\n        this.emojiClick = new core_1.EventEmitter();\n        this.input = '';\n        this.filterEmojis = '';\n        this.popupOpen = false;\n        this.lastCursorPosition = 0;\n    }\n    EmojiInputComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.setPopupAction) {\n            this.setPopupAction.emit(function (status) { _this.openPopup(status); });\n        }\n        this.allEmojis = this.emojiService.getAll();\n        this.clean();\n    };\n    EmojiInputComponent.prototype.ngAfterViewInit = function () {\n        if (this.autofocus) {\n            if (this.textArea) {\n                this.textareaEl.nativeElement.focus();\n            }\n            else {\n                this.inputEl.nativeElement.focus();\n            }\n        }\n    };\n    EmojiInputComponent.prototype.ngOnChanges = function () {\n        if (this.model !== this.input) {\n            this.input = this.model;\n        }\n    };\n    EmojiInputComponent.prototype.onKeyup = function (event) {\n        this.updateCursor();\n        if (this.keyup) {\n            this.keyup.emit(event);\n        }\n    };\n    EmojiInputComponent.prototype.onBlur = function (event) {\n        this.updateCursor();\n        if (this.blur) {\n            this.blur.emit(event);\n        }\n    };\n    EmojiInputComponent.prototype.onFocus = function (event) {\n        this.updateCursor();\n        if (this.focus) {\n            this.focus.emit(event);\n        }\n    };\n    EmojiInputComponent.prototype.clean = function () {\n        this.filterEmojis = '';\n        this.filteredEmojis = this.getFilteredEmojis();\n    };\n    EmojiInputComponent.prototype.openPopup = function (status) {\n        if (status === void 0) {\n            status = null;\n        }\n        if (status === null) {\n            this.popupOpen = !this.popupOpen;\n        }\n        else {\n            this.popupOpen = status;\n        }\n    };\n    EmojiInputComponent.prototype.updateFilteredEmojis = function () {\n        this.filteredEmojis = this.getFilteredEmojis();\n    };\n    EmojiInputComponent.prototype.getFilteredEmojis = function () {\n        var _this = this;\n        return this.allEmojis.filter(function (e) {\n            if (_this.filterEmojis === '') {\n                return true;\n            }\n            else {\n                for (var _i = 0, _a = e.aliases; _i < _a.length; _i++) {\n                    var alias = _a[_i];\n                    if (alias.includes(_this.filterEmojis)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        });\n    };\n    EmojiInputComponent.prototype.onEmojiClick = function (e) {\n        this.input = this.input.substr(0, this.lastCursorPosition) + e + this.input.substr(this.lastCursorPosition);\n        this.modelChange.emit(this.input);\n        this.emojiClick.emit(e);\n        if (this.closeAfterSelection) {\n            this.popupOpen = false;\n            this.clean();\n        }\n    };\n    EmojiInputComponent.prototype.onChange = function (newValue) {\n        this.input = this.emojiService.emojify(newValue);\n        this.model = this.input;\n        this.modelChange.emit(this.input);\n    };\n    EmojiInputComponent.prototype.updateCursor = function () {\n        if (this.textArea) {\n            this.lastCursorPosition = this.textareaEl.nativeElement.selectionStart;\n        }\n        else {\n            this.lastCursorPosition = this.inputEl.nativeElement.selectionStart;\n        }\n    };\n    EmojiInputComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'emoji-input',\n                    template: \"\\n    <ng-template [ngIf]=\\\"textArea\\\">\\n      <textarea #textareaEl name=\\\"text\\\"\\n        [ngClass]=\\\"[inputClass]\\\"\\n        [attr.cols]=\\\"textArea.cols\\\"\\n        [attr.rows]=\\\"textArea.rows\\\"\\n        (keyup)=\\\"onKeyup($event)\\\"\\n        (keyup.enter)=\\\"onEnter()\\\"\\n        (blur)=\\\"onBlur($event)\\\"\\n        (focus)=\\\"onFocus($event)\\\"\\n        (ngModelChange)=\\\"onChange($event)\\\"\\n        [(ngModel)]=\\\"input\\\">\\n      </textarea>\\n    </ng-template>\\n    <ng-template [ngIf]=\\\"!textArea\\\">\\n      <input #inputEl type=\\\"text\\\"\\n        [ngClass]=\\\"[inputClass]\\\"\\n        (keyup)=\\\"onKeyup($event)\\\"\\n        (keyup.enter)=\\\"onEnter()\\\"\\n        (blur)=\\\"onBlur($event)\\\"\\n        (focus)=\\\"onFocus($event)\\\"\\n        (ngModelChange)=\\\"onChange($event)\\\"\\n        [(ngModel)]=\\\"input\\\"/>\\n    </ng-template>\\n    <div class=\\\"emoji-search\\\"\\n      [ngClass]=\\\"[popupAnchor, searchClass]\\\"\\n      [hidden]=\\\"!popupOpen\\\"\\n      [style.display]=\\\"popupOpen ? 'flex' : 'none'\\\"\\n      (click)=\\\"$event.stopPropagation()\\\">\\n      <div class=\\\"search-header\\\">\\n        <input type=\\\"search\\\" placeholder=\\\"Search...\\\"\\n          [(ngModel)]=\\\"filterEmojis\\\"\\n          (ngModelChange)=\\\"updateFilteredEmojis()\\\"/>\\n      </div>\\n      <div class=\\\"emojis-container\\\">\\n        <span *ngFor=\\\"let emoji of filteredEmojis\\\"\\n              (click)=\\\"onEmojiClick(emoji.emoji)\\\"\\n               title=\\\"{{emoji.aliases[0]}}\\\">\\n          {{emoji.emoji}}\\n        </span>\\n      </div>\\n    </div>\\n  \",\n                    styles: [\"\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n      :host .emoji-search {\\n        background-color: #fff;\\n        border: 1px solid #ccc;\\n        border-radius: 4px;\\n        box-shadow: 0 1px 5px rgba(0, 0, 0, 0.15);\\n        height: auto;\\n        line-height: 1.5;\\n        position: absolute;\\n        right: 0;\\n        width: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        z-index: 100;\\n      }\\n      :host .emoji-search[hidden] {\\n        display: none;\\n      }\\n      :host .emoji-search.bottom {\\n        top: -202px;\\n      }\\n      :host .emoji-search input {\\n        border-radius: 4px;\\n        font-size: 10px;\\n        padding: 4px 8px;\\n        margin: 0;\\n        height: 30px;\\n      }\\n      :host .emoji-search .search-header {\\n        background-color: #eee;\\n        border-bottom: 1px solid #ccc;\\n        border-radius: 4px 4px 0 0;\\n        padding: 4px 8px;\\n        width: 100%;\\n      }\\n      :host .emoji-search .emojis-container {\\n        border-radius: 0 0 4px 4px;\\n        max-height: 160px;\\n        padding: 5px 12px;\\n        overflow: auto;\\n        overflow-x: hidden;\\n        flex: 1;\\n        display: flex;\\n        flex-wrap: wrap;\\n        justify-content: center;\\n      }\\n      :host .emoji-search span {\\n        cursor: pointer;\\n        padding: 4px 3px 2px 4px;\\n        font-size: 24px;\\n      }\\n      :host .emoji-search span:hover {\\n        background-color: #ccc;\\n      }\\n\\n  \"]\n                },] },\n    ];\n    EmojiInputComponent.propDecorators = {\n        \"textArea\": [{ type: core_1.Input },],\n        \"popupAnchor\": [{ type: core_1.Input },],\n        \"inputClass\": [{ type: core_1.Input },],\n        \"searchClass\": [{ type: core_1.Input },],\n        \"onEnter\": [{ type: core_1.Input },],\n        \"model\": [{ type: core_1.Input },],\n        \"autofocus\": [{ type: core_1.Input },],\n        \"closeAfterSelection\": [{ type: core_1.Input },],\n        \"modelChange\": [{ type: core_1.Output },],\n        \"setPopupAction\": [{ type: core_1.Output },],\n        \"blur\": [{ type: core_1.Output },],\n        \"focus\": [{ type: core_1.Output },],\n        \"keyup\": [{ type: core_1.Output },],\n        \"emojiClick\": [{ type: core_1.Output },],\n        \"textareaEl\": [{ type: core_1.ViewChild, args: ['textareaEl',] },],\n        \"inputEl\": [{ type: core_1.ViewChild, args: ['inputEl',] },],\n    };\n    return EmojiInputComponent;\n}());\nexports.EmojiInputComponent = EmojiInputComponent;\n",null]}