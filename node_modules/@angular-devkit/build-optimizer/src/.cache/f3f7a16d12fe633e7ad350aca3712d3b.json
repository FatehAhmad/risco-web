{"remainingRequest":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular\\fire\\angularfire2.js","dependencies":[{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular\\fire\\angularfire2.js","mtime":499162500000},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582123237433},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527226929000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_angular_common,rxjs,rxjs_operators PURE_IMPORTS_END */\nimport { InjectionToken } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, queueScheduler, asyncScheduler } from 'rxjs';\nimport { subscribeOn, observeOn, tap } from 'rxjs/operators';\nexport var RealtimeDatabaseURL = /*@__PURE__*/ new InjectionToken('angularfire2.realtimeDatabaseURL');\nexport var DATABASE_URL = RealtimeDatabaseURL;\nfunction noop() { }\nvar ɵZoneScheduler = /*@__PURE__*/ (function () {\n    function ɵZoneScheduler(zone, delegate) {\n        if (delegate === void 0) {\n            delegate = queueScheduler;\n        }\n        this.zone = zone;\n        this.delegate = delegate;\n    }\n    ɵZoneScheduler.prototype.now = function () {\n        return this.delegate.now();\n    };\n    ɵZoneScheduler.prototype.schedule = function (work, delay, state) {\n        var targetZone = this.zone;\n        var workInZone = function (state) {\n            var _this = this;\n            targetZone.runGuarded(function () {\n                work.apply(_this, [state]);\n            });\n        };\n        return this.delegate.schedule(workInZone, delay, state);\n    };\n    return ɵZoneScheduler;\n}());\nexport { ɵZoneScheduler };\nvar ɵBlockUntilFirstOperator = /*@__PURE__*/ (function () {\n    function ɵBlockUntilFirstOperator(zone) {\n        this.zone = zone;\n        this.task = null;\n    }\n    ɵBlockUntilFirstOperator.prototype.call = function (subscriber, source) {\n        var unscheduleTask = this.unscheduleTask.bind(this);\n        this.task = this.zone.run(function () { return Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop); });\n        return source.pipe(tap(unscheduleTask, unscheduleTask, unscheduleTask)).subscribe(subscriber).add(unscheduleTask);\n    };\n    ɵBlockUntilFirstOperator.prototype.unscheduleTask = function () {\n        if (this.task != null && this.task.state === 'scheduled') {\n            this.task.invoke();\n            this.task = null;\n        }\n    };\n    return ɵBlockUntilFirstOperator;\n}());\nexport { ɵBlockUntilFirstOperator };\nvar ɵAngularFireSchedulers = /*@__PURE__*/ (function () {\n    function ɵAngularFireSchedulers(ngZone) {\n        this.ngZone = ngZone;\n        this.outsideAngular = ngZone.runOutsideAngular(function () { return new ɵZoneScheduler(Zone.current); });\n        this.insideAngular = ngZone.run(function () { return new ɵZoneScheduler(Zone.current, asyncScheduler); });\n    }\n    return ɵAngularFireSchedulers;\n}());\nexport { ɵAngularFireSchedulers };\nexport function ɵkeepUnstableUntilFirstFactory(schedulers, platformId) {\n    return function keepUnstableUntilFirst(obs$) {\n        if (isPlatformServer(platformId)) {\n            obs$ = obs$.lift(new ɵBlockUntilFirstOperator(schedulers.ngZone));\n        }\n        return obs$.pipe(subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n    };\n}\nexport var runOutsideAngular = function (zone) {\n    return function (obs$) {\n        return new Observable(function (subscriber) {\n            return zone.runOutsideAngular(function () {\n                runInZone(zone)(obs$).subscribe(subscriber);\n            });\n        });\n    };\n};\nexport var runInZone = function (zone) {\n    return function (obs$) {\n        return new Observable(function (subscriber) {\n            return obs$.subscribe(function (value) { return zone.run(function () { return subscriber.next(value); }); }, function (error) { return zone.run(function () { return subscriber.error(error); }); }, function () { return zone.run(function () { return subscriber.complete(); }); });\n        });\n    };\n};\nvar FirebaseZoneScheduler = /*@__PURE__*/ (function () {\n    function FirebaseZoneScheduler(zone, platformId) {\n        this.zone = zone;\n        this.platformId = platformId;\n    }\n    FirebaseZoneScheduler.prototype.schedule = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return this.zone.runGuarded(function () { return queueScheduler.schedule.apply(queueScheduler, args); });\n    };\n    FirebaseZoneScheduler.prototype.keepUnstableUntilFirst = function (obs$) {\n        if (isPlatformServer(this.platformId)) {\n            return new Observable(function (subscriber) {\n                var noop = function () { };\n                var task = Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);\n                obs$.subscribe(function (next) {\n                    if (task.state === 'scheduled') {\n                        task.invoke();\n                    }\n                    ;\n                    subscriber.next(next);\n                }, function (error) {\n                    if (task.state === 'scheduled') {\n                        task.invoke();\n                    }\n                    subscriber.error(error);\n                }, function () {\n                    if (task.state === 'scheduled') {\n                        task.invoke();\n                    }\n                    subscriber.complete();\n                });\n            });\n        }\n        else {\n            return obs$;\n        }\n    };\n    FirebaseZoneScheduler.prototype.runOutsideAngular = function (obs$) {\n        var _this = this;\n        return new Observable(function (subscriber) {\n            return _this.zone.runOutsideAngular(function () {\n                return obs$.subscribe(function (value) { return _this.zone.run(function () { return subscriber.next(value); }); }, function (error) { return _this.zone.run(function () { return subscriber.error(error); }); }, function () { return _this.zone.run(function () { return subscriber.complete(); }); });\n            });\n        });\n    };\n    return FirebaseZoneScheduler;\n}());\nexport { FirebaseZoneScheduler };\nvar noopFunctions = ['ngOnDestroy'];\nexport var ɵlazySDKProxy = function (klass, observable, zone) {\n    return new Proxy(klass, {\n        get: function (_, name) {\n            return zone.runOutsideAngular(function () {\n                if (klass[name]) {\n                    return klass[name];\n                }\n                if (noopFunctions.includes(name)) {\n                    return function () { };\n                }\n                var promise = observable.toPromise().then(function (mod) {\n                    var ret = mod && mod[name];\n                    if (typeof ret == 'function') {\n                        return ret.bind(mod);\n                    }\n                    else if (ret && ret.then) {\n                        return ret.then(function (res) { return zone.run(function () { return res; }); });\n                    }\n                    else {\n                        return zone.run(function () { return ret; });\n                    }\n                });\n                return new Proxy(function () { return undefined; }, {\n                    get: function (_, name) { return promise[name]; },\n                    apply: function (self, _, args) { return promise.then(function (it) { return it && it.apply(void 0, args); }); }\n                });\n            });\n        }\n    });\n};\n//# sourceMappingURL=angularfire2.js.map\n",null]}