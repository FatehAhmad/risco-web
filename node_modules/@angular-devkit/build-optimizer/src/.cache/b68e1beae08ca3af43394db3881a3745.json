{"remainingRequest":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular\\fire\\database\\list\\audit-trail.js","dependencies":[{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular\\fire\\database\\list\\audit-trail.js","mtime":499162500000},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582123237433},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527226929000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _state_changes,_observable_fromRef,rxjs_operators PURE_IMPORTS_END */\nimport { stateChanges } from './state-changes';\nimport { fromRef } from '../observable/fromRef';\nimport { skipWhile, withLatestFrom, map, scan } from 'rxjs/operators';\nexport function auditTrail(query, events, scheduler) {\n    var auditTrail$ = stateChanges(query, events)\n        .pipe(scan(function (current, action) { return current.concat([action]); }, []));\n    return waitForLoaded(query, auditTrail$, scheduler);\n}\nfunction loadedData(query, scheduler) {\n    return fromRef(query, 'value', 'on', scheduler)\n        .pipe(map(function (data) {\n        var lastKeyToLoad;\n        data.payload.forEach(function (child) {\n            lastKeyToLoad = child.key;\n            return false;\n        });\n        return { data: data, lastKeyToLoad: lastKeyToLoad };\n    }));\n}\nfunction waitForLoaded(query, action$, scheduler) {\n    var loaded$ = loadedData(query, scheduler);\n    return loaded$\n        .pipe(withLatestFrom(action$), map(function (_a) {\n        var loaded = _a[0], actions = _a[1];\n        var lastKeyToLoad = loaded.lastKeyToLoad;\n        var loadedKeys = actions.map(function (snap) { return snap.key; });\n        return { actions: actions, lastKeyToLoad: lastKeyToLoad, loadedKeys: loadedKeys };\n    }), skipWhile(function (meta) { return meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1; }), map(function (meta) { return meta.actions; }));\n}\n//# sourceMappingURL=audit-trail.js.map\n",null]}