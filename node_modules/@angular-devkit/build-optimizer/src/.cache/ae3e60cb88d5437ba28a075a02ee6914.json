{"remainingRequest":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular\\fire\\database\\observable\\fromRef.js","dependencies":[{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular\\fire\\database\\observable\\fromRef.js","mtime":499162500000},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582123237433},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527226929000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START rxjs,rxjs_operators PURE_IMPORTS_END */\nimport { Observable, asyncScheduler } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\nexport function fromRef(ref, event, listenType, scheduler) {\n    if (listenType === void 0) {\n        listenType = 'on';\n    }\n    if (scheduler === void 0) {\n        scheduler = asyncScheduler;\n    }\n    return new Observable(function (subscriber) {\n        var fn = null;\n        fn = ref[listenType](event, function (snapshot, prevKey) {\n            scheduler.schedule(function () {\n                subscriber.next({ snapshot: snapshot, prevKey: prevKey });\n            });\n            if (listenType == 'once') {\n                scheduler.schedule(function () { return subscriber.complete(); });\n            }\n        }, function (err) {\n            scheduler.schedule(function () { return subscriber.error(err); });\n        });\n        if (listenType == 'on') {\n            return {\n                unsubscribe: function () {\n                    if (fn != null) {\n                        ref.off(event, fn);\n                    }\n                }\n            };\n        }\n        else {\n            return { unsubscribe: function () { } };\n        }\n    }).pipe(map(function (payload) {\n        var snapshot = payload.snapshot, prevKey = payload.prevKey;\n        var key = null;\n        if (snapshot.exists()) {\n            key = snapshot.key;\n        }\n        return { type: event, payload: snapshot, prevKey: prevKey, key: key };\n    }), share());\n}\n//# sourceMappingURL=fromRef.js.map\n",null]}