{"remainingRequest":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@firebase\\polyfill\\node_modules\\core-js\\internals\\to-primitive.js","dependencies":[{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@firebase\\polyfill\\node_modules\\core-js\\internals\\to-primitive.js","mtime":499162500000},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582123237433},{"path":"D:\\FAR\\Projects\\Risco - Working Copy\\risco-web\\risco-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527226929000}],"contextDependencies":[],"result":["// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('../internals/is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n",null]}