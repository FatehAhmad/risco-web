/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TimeagoIntl } from './timeago.intl';
import { MINUTE, HOUR, DAY, WEEK, MONTH, YEAR } from './util';
const /** @type {?} */ defaultFormattter = function (then) {
    const /** @type {?} */ now = Date.now();
    const /** @type {?} */ seconds = Math.round(Math.abs(now - then) / 1000);
    const /** @type {?} */ suffix = then < now ? 'ago' : 'from now';
    const [value, unit] = seconds < MINUTE
        ? [Math.round(seconds), 'second']
        : seconds < HOUR
            ? [Math.round(seconds / MINUTE), 'minute']
            : seconds < DAY
                ? [Math.round(seconds / HOUR), 'hour']
                : seconds < WEEK
                    ? [Math.round(seconds / DAY), 'day']
                    : seconds < MONTH
                        ? [Math.round(seconds / WEEK), 'week']
                        : seconds < YEAR
                            ? [Math.round(seconds / MONTH), 'month']
                            : [Math.round(seconds / YEAR), 'year'];
    return { value, unit, suffix };
};
const ɵ0 = defaultFormattter;
/**
 * @abstract
 */
export class TimeagoFormatter {
}
function TimeagoFormatter_tsickle_Closure_declarations() {
    /**
     * @abstract
     * @param {?} then
     * @return {?}
     */
    TimeagoFormatter.prototype.format = function (then) { };
    /**
     * @abstract
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @param {?=} now
     * @param {?=} then
     * @return {?}
     */
    TimeagoFormatter.prototype.parse = function (value, unit, suffix, now, then) { };
}
export class TimeagoDefaultFormatter extends TimeagoFormatter {
    /**
     * @param {?} then
     * @return {?}
     */
    format(then) {
        const { suffix, value, unit } = defaultFormattter(then);
        return this.parse(value, unit, suffix);
    }
    /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @return {?}
     */
    parse(value, unit, suffix) {
        if (value !== 1) {
            unit += 's';
        }
        return value + ' ' + unit + ' ' + suffix;
    }
}
TimeagoDefaultFormatter.decorators = [
    { type: Injectable },
];
export class TimeagoCustomFormatter extends TimeagoFormatter {
    /**
     * @param {?} intl
     */
    constructor(intl) {
        super();
        this.intl = intl;
    }
    /**
     * @param {?} then
     * @return {?}
     */
    format(then) {
        const { suffix, value, unit } = defaultFormattter(then);
        return this.parse(value, unit, suffix, Date.now(), then);
    }
    /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @param {?} now
     * @param {?} then
     * @return {?}
     */
    parse(value, unit, suffix, now, then) {
        /** convert weeks to days if strings don't handle weeks */
        if (unit === 'week' && !this.intl.strings.week && !this.intl.strings.weeks) {
            const /** @type {?} */ days = Math.round(Math.abs(now - then) / (1000 * 60 * 60 * 24));
            value = days;
            unit = 'day';
        }
        /**
         * create a normalize function for given value
         */
        const /** @type {?} */ normalize = this.normalizeFn(value, now - then, this.intl.strings.numbers);
        /**
         * The eventual return value stored in an array so that the wordSeparator can be used
         */
        const /** @type {?} */ dateString = [];
        /** handle prefixes */
        if (suffix === 'ago' && this.intl.strings.prefixAgo) {
            dateString.push(normalize(this.intl.strings.prefixAgo));
        }
        if (suffix === 'from now' && this.intl.strings.prefixFromNow) {
            dateString.push(normalize(this.intl.strings.prefixFromNow));
        }
        /**
         * Handle Main number and unit
         */
        const /** @type {?} */ isPlural = value > 1;
        if (isPlural) {
            const /** @type {?} */ stringFn = this.intl.strings[unit + 's'] || this.intl.strings[unit] || '%d ' + unit;
            dateString.push(normalize(stringFn));
        }
        else {
            const /** @type {?} */ stringFn = this.intl.strings[unit] || this.intl.strings[unit + 's'] || '%d ' + unit;
            dateString.push(normalize(stringFn));
        }
        /** Handle Suffixes */
        if (suffix === 'ago' && this.intl.strings.suffixAgo) {
            dateString.push(normalize(this.intl.strings.suffixAgo));
        }
        if (suffix === 'from now' && this.intl.strings.suffixFromNow) {
            dateString.push(normalize(this.intl.strings.suffixFromNow));
        }
        /**
         * join the array into a string and return it
         */
        const /** @type {?} */ wordSeparator = typeof this.intl.strings.wordSeparator === 'string' ? this.intl.strings.wordSeparator : ' ';
        return dateString.join(wordSeparator);
    }
    /**
     * If the numbers array is present, format numbers with it,
     * otherwise just cast the number to a string and return it
     * @param {?} numbers
     * @param {?} value
     * @return {?}
     */
    normalizeNumber(numbers, value) {
        return numbers && numbers.length === 10
            ? String(value).split('')
                .map((digit) => digit.match(/^[0-9]$/) ? numbers[parseInt(digit, 10)] : digit)
                .join('')
            : String(value);
    }
    /**
     * Take a string or a function that takes number of days and returns a string
     * and provide a uniform API to create string parts
     * @param {?} value
     * @param {?} millisDelta
     * @param {?=} numbers
     * @return {?}
     */
    normalizeFn(value, millisDelta, numbers) {
        return (stringOrFn) => typeof stringOrFn === 'function'
            ? stringOrFn(value, millisDelta).replace(/%d/g, this.normalizeNumber(numbers, value))
            : stringOrFn.replace(/%d/g, this.normalizeNumber(numbers, value));
    }
}
TimeagoCustomFormatter.decorators = [
    { type: Injectable },
];
/** @nocollapse */
TimeagoCustomFormatter.ctorParameters = () => [
    { type: TimeagoIntl }
];
function TimeagoCustomFormatter_tsickle_Closure_declarations() {
    /** @type {?} */
    TimeagoCustomFormatter.prototype.intl;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,